requires = ["tox>=4.19"]
env_list = ["fix", "3.13", "3.12", "3.11", "3.10", "3.9", "3.8", "cov", "type", "docs", "pkg_meta"]
skip_missing_interpreters = true

[env_run_base]
description = "run the tests with pytest under {env_name}"
package = "wheel"
wheel_build_env = ".pkg"
extras = ["testing"]
pass_env = ["PYTEST_*", "SSL_CERT_FILE"]
set_env.COVERAGE_FILE = { replace = "env", name = "COVERAGE_FILE", default = "{work_dir}{/}.coverage.{env_name}" }
set_env.COVERAGE_FILECOVERAGE_PROCESS_START = "{tox_root}{/}pyproject.toml"
commands = [
  [
    "pytest",
    { replace = "posargs", default = [
      "--junitxml",
      "{work_dir}{/}junit.{env_name}.xml",
      "--cov",
      "{env_site_packages_dir}{/}tox",
      "--cov",
      "{tox_root}{/}tests",
      "--cov-config={tox_root}{/}pyproject.toml",
      "-no-cov-on-fail",
      "--cov-report",
      "term-missing:skip-covered",
      "--cov-context=test",
      "--cov-report",
      "html:{env_tmp_dir}{/}htmlcov",
      "--cov-report",
      "xml:{work_dir}{/}coverage.{env_name}.xml",
      "-n",
      { replace = "env", name = "PYTEST_XDIST_AUTO_NUM_WORKERS", default = "auto" },
      "tests",
      "--durations",
      "15",
      "--run-integration",
    ] },
  ],
  [
    "diff-cover",
    "--compare-branch",
    { replace = "env", name = "DIFF_AGAINST", default = "origin/main" },
    "{work_dir}{/}coverage.{env_name}.xml",
  ],
]

[env.fix]
description = "format the code base to adhere to our styles, and complain about what we cannot do automatically"
skip_install = true
deps = ["pre-commit-uv>=4.1.3"]
pass_env = [{ replace = "ref", of = ["env_run_base", "pass_env"] }, "PROGRAMDATA"]
commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure", { replace = "posargs" }]]

[env.type]
description = "run type check on code base"
deps = ["mypy==1.11.2", "types-cachetools>=5.5.0.20240820", "types-chardet>=5.0.4.6"]
commands = [["mypy", "src{/}tox"], ["mypy", "tests"]]

[env.docs]
description = "build documentation"
extras = ["docs"]
commands = [
  { replace = "posargs", default = [
    "sphinx-build",
    "-d",
    "{env_tmp_dir}{/}docs_tree",
    "docs",
    "{work_dir}{/}docs_out",
    "--color",
    "-b",
    "linkcheck",
  ] },
  [
    "sphinx-build",
    "-d",
    "{env_tmp_dir}{/}docs_tree",
    "docs",
    "{work_dir}{/}docs_out",
    "--color",
    "-b",
    "html",
    "-W",
  ],
  [
    "python",
    "-c",
    'print(r"documentation available under file://{work_dir}{/}docs_out{/}index.html")',
  ],
]


[env.pkg_meta]
description = "check that the long description is valid"
skip_install = true
deps = ["check-wheel-contents>=0.6", "twine>=5.1.1", "uv>=0.4.17"]
commands = [
  [
    "uv",
    "build",
    "--sdist",
    "--wheel",
    "--out-dir",
    "{env_tmp_dir}",
    ".",
  ],
  [
    "twine",
    "check",
    "{env_tmp_dir}{/}*",
  ],
  [
    "check-wheel-contents",
    "--no-config",
    "{env_tmp_dir}",
  ],
]

[env.release]
description = "do a release, required posargs of the version number"
skip_install = true
deps = ["gitpython>=3.1.43", "packaging>=24.1", "towncrier>=24.8"]
commands = [["python", "{tox_root}/tasks/release.py", "--version", "{posargs}"]]

[env.dev]
description = "dev environment with all deps at {envdir}"
package = "editable"
deps = { replace = "ref", of = ["env", "release", "deps"] }
extras = ["docs", "testing"]
commands = [["python", "-m", "pip", "list", "--format=columns"], ["python", "-c", 'print(r"{env_python}")']]
uv_seed = true
