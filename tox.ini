[tox]
envlist =
    fix
    py310
    py39
    py38
    py37
    cov
    type
    docs
    pkg_meta
skip_missing_interpreters = true

[testenv]
description = run the tests with pytest under {envname}
passenv =
    PYTEST_*
    SSL_CERT_FILE
setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}{/}.coverage.{envname}}
    COVERAGE_PROCESS_START = {toxinidir}{/}setup.cfg
extras =
    testing
commands =
    pytest {tty:--color=yes} {posargs: \
      --junitxml {toxworkdir}{/}junit.{envname}.xml --cov {envsitepackagesdir}{/}tox --cov {toxinidir}{/}tests \
      --cov-config=setup.cfg --no-cov-on-fail --cov-report term-missing:skip-covered --cov-context=test \
      --cov-report html:{envtmpdir}{/}htmlcov \
      --cov-report xml:{toxworkdir}{/}coverage.{envname}.xml \
      -n={env:PYTEST_XDIST_PROC_NR:auto} \
      tests --durations 5 --run-integration}
package = wheel
wheel_build_env = .pkg

[testenv:fix]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
passenv =
    {[testenv]passenv}
    PROGRAMDATA
skip_install = true
deps =
    pre-commit>=2.16
commands =
    pre-commit run --all-files --show-diff-on-failure {tty:--color=always} {posargs}
    python -c 'print(r"hint: run {envbindir}{/}pre-commit install to add checks as pre-commit hook")'

[testenv:type]
description = run type check on code base
setenv =
    {tty:MYPY_FORCE_COLOR = 1}
deps =
    mypy==0.930
    types-cachetools
    types-chardet
    types-freezegun
commands =
    mypy src/tox
    mypy tests

[testenv:docs]
description = build documentation
extras =
    docs
commands =
    sphinx-build -d "{envtmpdir}{/}doctree" docs "{toxworkdir}{/}docs_out" --color -b html {posargs}
    python -c 'print(r"documentation available under file://{toxworkdir}{/}docs_out{/}index.html")'

[testenv:pkg_meta]
description = check that the long description is valid
skip_install = true
deps =
    build[virtualenv]>=0.7
    check-wheel-contents>=0.3.3
    twine>=3.7.1
commands =
    python -m build -o {envtmpdir} -s -w .
    twine check {envtmpdir}{/}*
    check-wheel-contents --no-config {envtmpdir}

[testenv:release]
description = do a release, required posarg of the version number
skip_install = true
deps =
    gitpython>=3.1.24
    packaging>=21.3
    towncrier>=21.3
commands =
    python {toxinidir}/tasks/release.py --version {posargs}

[testenv:dev]
description = dev environment with all deps at {envdir}
usedevelop = true
deps =
    {[testenv:release]deps}
extras =
    docs
    testing
commands =
    python -m pip list --format=columns
    python -c "print(r'{envpython}')"
